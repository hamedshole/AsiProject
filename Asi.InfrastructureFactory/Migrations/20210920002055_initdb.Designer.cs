// <auto-generated />
using System;
using Asi.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Asi.Infrastructure.Factory.Migrations
{
    [DbContext(typeof(AsiDbContext))]
    [Migration("20210920002055_initdb")]
    partial class initdb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Asi.Domain.Entities.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accepted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("CertificateExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CertificateTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CertificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("ExpirationNotified")
                        .HasColumnType("bit");

                    b.Property<int?>("HologramNumber")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<bool>("NeedToBeCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProvinceIdId")
                        .HasColumnType("int");

                    b.Property<int?>("RefferenceFormId")
                        .HasColumnType("int");

                    b.Property<bool>("Rejected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CertificateTypeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ProvinceIdId");

                    b.HasIndex("RefferenceFormId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Asi.Domain.Entities.CertificateControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgancyId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("CertificateControllerId")
                        .HasColumnType("int");

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ControlDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ControlFormId")
                        .HasColumnType("int");

                    b.Property<int>("ControlTime")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MainControllerId")
                        .HasColumnType("int");

                    b.Property<int?>("MarketingId")
                        .HasColumnType("int");

                    b.Property<bool>("Submitted")
                        .HasColumnType("bit");

                    b.Property<int?>("TechnicalManagerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgancyId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CertificateControllerId");

                    b.HasIndex("CertificateId");

                    b.HasIndex("ControlFormId");

                    b.HasIndex("MainControllerId");

                    b.HasIndex("MarketingId");

                    b.HasIndex("TechnicalManagerId");

                    b.ToTable("CertificateControls");
                });

            modelBuilder.Entity("Asi.Domain.Entities.CertificateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CertificateTypes");
                });

            modelBuilder.Entity("Asi.Domain.Entities.ControlImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ControlId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ControlId");

                    b.ToTable("ControlImage");
                });

            modelBuilder.Entity("Asi.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Asi.Domain.Entities.FormDataGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("SavedFormDataId")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SavedFormDataId");

                    b.HasIndex("TemplateId");

                    b.ToTable("DataGroups");
                });

            modelBuilder.Entity("Asi.Domain.Entities.FormDataRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FifthAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForthAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MissMatchWord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("SecondAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("ThirdAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TemplateId");

                    b.ToTable("FormDataRows");
                });

            modelBuilder.Entity("Asi.Domain.Entities.FormTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CertificateTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FormCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StandradRefference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToolCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CertificateTypeId");

                    b.HasIndex("ItemId");

                    b.ToTable("FormTemplates");
                });

            modelBuilder.Entity("Asi.Domain.Entities.FormTemplateAnswerColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("AnswerColumns");
                });

            modelBuilder.Entity("Asi.Domain.Entities.FormTemplateGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<bool>("HasNote")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSubtitle")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCheckbox")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("FormTemplateGroups");
                });

            modelBuilder.Entity("Asi.Domain.Entities.FormTemplateQuestionHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("QuestionHeaders");
                });

            modelBuilder.Entity("Asi.Domain.Entities.FormTemplateRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstQuestion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForthQuestion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("SecondQuestion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemplateGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ThirdQuestion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TemplateGroupId");

                    b.ToTable("FormTemplateRows");
                });

            modelBuilder.Entity("Asi.Domain.Entities.FormTemplateRowMissMatchWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("RowId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RowId");

                    b.ToTable("TemplateRowMissMatchWords");
                });

            modelBuilder.Entity("Asi.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Asi.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<int>("FactorNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceiptNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Asi.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgancyPercent")
                        .HasColumnType("int");

                    b.Property<int>("BranchPercent")
                        .HasColumnType("int");

                    b.Property<int>("CertificatePercent")
                        .HasColumnType("int");

                    b.Property<int>("ControlPercent")
                        .HasColumnType("int");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MarketingPercent")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signiture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Asi.Domain.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("Asi.Domain.Entities.SavedFormData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("SavedFormDatas");
                });

            modelBuilder.Entity("Asi.Domain.Entities.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("Asi.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Asi.Domain.Entities.UserDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartments");
                });

            modelBuilder.Entity("Asi.Domain.Entities.UserItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("UserItems");
                });

            modelBuilder.Entity("Asi.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Permissions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Asi.Domain.Entities.Certificate", b =>
                {
                    b.HasOne("Asi.Domain.Entities.CertificateType", "CertificateType")
                        .WithMany("Certificates")
                        .HasForeignKey("CertificateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asi.Domain.Entities.Department", "Department")
                        .WithMany("Certificates")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asi.Domain.Entities.Item", "Item")
                        .WithMany("Certificates")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asi.Domain.Entities.Province", "Province")
                        .WithMany("Certificates")
                        .HasForeignKey("ProvinceIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asi.Domain.Entities.SavedFormData", "RefferenceForm")
                        .WithMany()
                        .HasForeignKey("RefferenceFormId");

                    b.HasOne("Asi.Domain.Entities.ServiceType", "ServiceType")
                        .WithMany("Certificates")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Asi.Domain.ValueObjects.Company", "Company", b1 =>
                        {
                            b1.Property<int>("CertificateId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Company_Address");

                            b1.Property<string>("Fullname")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Company_Name");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Company_PhoneNumber");

                            b1.HasKey("CertificateId");

                            b1.ToTable("Certificates");

                            b1.WithOwner()
                                .HasForeignKey("CertificateId");
                        });

                    b.Navigation("CertificateType");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Item");

                    b.Navigation("Province");

                    b.Navigation("RefferenceForm");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Asi.Domain.Entities.CertificateControl", b =>
                {
                    b.HasOne("Asi.Domain.Entities.Person", "Agancy")
                        .WithMany()
                        .HasForeignKey("AgancyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Asi.Domain.Entities.Person", "BranchPerson")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Asi.Domain.Entities.Person", "CertificateController")
                        .WithMany()
                        .HasForeignKey("CertificateControllerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Asi.Domain.Entities.Certificate", "Certificate")
                        .WithMany("Controls")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asi.Domain.Entities.SavedFormData", "ControlForm")
                        .WithMany()
                        .HasForeignKey("ControlFormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Asi.Domain.Entities.Person", "MainController")
                        .WithMany()
                        .HasForeignKey("MainControllerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Asi.Domain.Entities.Person", "Marketing")
                        .WithMany()
                        .HasForeignKey("MarketingId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Asi.Domain.Entities.Person", "TechnicalManager")
                        .WithMany()
                        .HasForeignKey("TechnicalManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("Asi.Domain.ValueObjects.Link", "Link", b1 =>
                        {
                            b1.Property<int>("CertificateControlId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Fullname")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Link_Name");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Link_PhoneNumber");

                            b1.Property<string>("Signiture")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Link_Signiture");

                            b1.HasKey("CertificateControlId");

                            b1.ToTable("CertificateControls");

                            b1.WithOwner()
                                .HasForeignKey("CertificateControlId");
                        });

                    b.OwnsOne("Asi.Domain.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<int>("CertificateControlId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("Latitude")
                                .HasColumnType("float")
                                .HasColumnName("Location_Latitude");

                            b1.Property<double>("Longtitude")
                                .HasColumnType("float")
                                .HasColumnName("Location_Longtitude");

                            b1.HasKey("CertificateControlId");

                            b1.ToTable("CertificateControls");

                            b1.WithOwner()
                                .HasForeignKey("CertificateControlId");
                        });

                    b.Navigation("Agancy");

                    b.Navigation("BranchPerson");

                    b.Navigation("Certificate");

                    b.Navigation("CertificateController");

                    b.Navigation("ControlForm");

                    b.Navigation("Link");

                    b.Navigation("Location");

                    b.Navigation("MainController");

                    b.Navigation("Marketing");

                    b.Navigation("TechnicalManager");
                });

            modelBuilder.Entity("Asi.Domain.Entities.ControlImage", b =>
                {
                    b.HasOne("Asi.Domain.Entities.CertificateControl", "Control")
                        .WithMany("Images")
                        .HasForeignKey("ControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Control");
                });

            modelBuilder.Entity("Asi.Domain.Entities.FormDataGroup", b =>
                {
                    b.HasOne("Asi.Domain.Entities.SavedFormData", "SavedFormData")
                        .WithMany("Groups")
                        .HasForeignKey("SavedFormDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asi.Domain.Entities.FormTemplateGroup", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SavedFormData");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Asi.Domain.Entities.FormDataRow", b =>
                {
                    b.HasOne("Asi.Domain.Entities.FormDataGroup", "Group")
                        .WithMany("Answers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asi.Domain.Entities.FormTemplateRow", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Asi.Domain.Entities.FormTemplate", b =>
                {
                    b.HasOne("Asi.Domain.Entities.CertificateType", "CertificateType")
                        .WithMany()
                        .HasForeignKey("CertificateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asi.Domain.Entities.Item", "Item")
                        .WithMany("Formtemplates")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CertificateType");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Asi.Domain.Entities.FormTemplateAnswerColumn", b =>
                {
                    b.HasOne("Asi.Domain.Entities.FormTemplateGroup", "Group")
                        .WithMany("AnswerColumns")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Asi.Domain.Entities.FormTemplateGroup", b =>
                {
                    b.HasOne("Asi.Domain.Entities.FormTemplate", "Form")
                        .WithMany("Groups")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("Asi.Domain.Entities.FormTemplateQuestionHeader", b =>
                {
                    b.HasOne("Asi.Domain.Entities.FormTemplateGroup", "Group")
                        .WithMany("QuestionHeaders")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Asi.Domain.Entities.FormTemplateRow", b =>
                {
                    b.HasOne("Asi.Domain.Entities.FormTemplateGroup", "TemplateGroup")
                        .WithMany("Questions")
                        .HasForeignKey("TemplateGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TemplateGroup");
                });

            modelBuilder.Entity("Asi.Domain.Entities.FormTemplateRowMissMatchWord", b =>
                {
                    b.HasOne("Asi.Domain.Entities.FormTemplateRow", "Row")
                        .WithMany("MissMatchWords")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Row");
                });

            modelBuilder.Entity("Asi.Domain.Entities.Item", b =>
                {
                    b.HasOne("Asi.Domain.Entities.ServiceType", "ServiceType")
                        .WithMany("Items")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Asi.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Asi.Domain.Entities.Certificate", "Certificate")
                        .WithMany("Payments")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("Asi.Domain.Entities.SavedFormData", b =>
                {
                    b.HasOne("Asi.Domain.Entities.FormTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Asi.Domain.Entities.ServiceType", b =>
                {
                    b.HasOne("Asi.Domain.Entities.Department", "Department")
                        .WithMany("ServiceTypes")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Asi.Domain.Entities.User", b =>
                {
                    b.HasOne("Asi.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asi.Domain.Entities.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Asi.Domain.Entities.UserDepartment", b =>
                {
                    b.HasOne("Asi.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asi.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Asi.Domain.Entities.UserItems", b =>
                {
                    b.HasOne("Asi.Domain.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asi.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Asi.Domain.Entities.Certificate", b =>
                {
                    b.Navigation("Controls");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Asi.Domain.Entities.CertificateControl", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Asi.Domain.Entities.CertificateType", b =>
                {
                    b.Navigation("Certificates");
                });

            modelBuilder.Entity("Asi.Domain.Entities.Department", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("ServiceTypes");
                });

            modelBuilder.Entity("Asi.Domain.Entities.FormDataGroup", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Asi.Domain.Entities.FormTemplate", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Asi.Domain.Entities.FormTemplateGroup", b =>
                {
                    b.Navigation("AnswerColumns");

                    b.Navigation("QuestionHeaders");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Asi.Domain.Entities.FormTemplateRow", b =>
                {
                    b.Navigation("MissMatchWords");
                });

            modelBuilder.Entity("Asi.Domain.Entities.Item", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Formtemplates");
                });

            modelBuilder.Entity("Asi.Domain.Entities.Province", b =>
                {
                    b.Navigation("Certificates");
                });

            modelBuilder.Entity("Asi.Domain.Entities.SavedFormData", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Asi.Domain.Entities.ServiceType", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
